#ifndef modelR_h
#define modelR_h

#include <iostream>
#include <fstream>
#include <math.h>
#include <cstring>
#include <stdio.h>
#include <string.h>

#if UseRCPP==1
        #include "preprocRCPP_R.h"
#else
        #include "preproc.h"    
#endif

#include "ODE.h"
#include "exogenousVariables.h"

using namespace std;

// GOODWIN-KEEN BUT WITH TWO EXOGENOUS VARIABLES (THIS IS JUST TO ILLUSTRATE THE USE OF INTERMEDIATE VARIABLES)
template<typename T>
class modelR : virtual public ODE<T> {
public:
	void makeEventTime(const T t, T* parms, T* y, T* x, T h) override {
} 


	void makeEventVar(const T t,T* parms, T* y, T* x, T h) override {
} 


	// GOODWIN-KEEN MODEL DEFINITION
	void Func(const T t, const T* y, const T* parms, T* ydot, T* x) override {

x[0] = this->getExogVar(t, 0.0);
x[1] = this->getExogVar(t, 1.0);
x[2] = this->getExogVar(t, 2.0);
x[3] = this->getExogVar(t, 3.0);
x[4] = this->getExogVar(t, 4.0);
x[5] = this->getExogVar(t, 5.0);
x[6] = this->getExogVar(t, 6.0);
x[7] = this->getExogVar(t, 7.0);
x[8] = this->getExogVar(t, 8.0);
x[9] = this->getExogVar(t, 9.0);
x[10] = this->getExogVar(t, 10.0);
x[11] = this->getExogVar(t, 11.0);
x[12] = this->getExogVar(t, 12.0);
x[13] = this->getExogVar(t, 13.0);
x[14] = this->getExogVar(t, 14.0);
x[15] = this->getExogVar(t, 15.0);
x[16] = this->getExogVar(t, 16.0);
x[17] = this->getExogVar(t, 17.0);
x[18] = this->getExogVar(t, 18.0);
x[19] = this->getExogVar(t, 19.0);
x[20] = this->getExogVar(t, 20.0);
x[21] = this->getExogVar(t, 21.0);
x[22] = this->getExogVar(t, 22.0);
x[23] = this->getExogVar(t, 23.0);
x[24] = this->getExogVar(t, 24.0);
x[25] = this->getExogVar(t, 25.0);
x[26] = this->getExogVar(t, 26.0);
x[27] = this->getExogVar(t, 27.0);
x[28] = this->getExogVar(t, 28.0);
x[29] = this->getExogVar(t, 29.0);
x[30] = this->getExogVar(t, 30.0);
x[31] = this->getExogVar(t, 31.0);
x[32] = this->getExogVar(t, 32.0);
x[33] = this->getExogVar(t, 33.0);
x[34] = this->getExogVar(t, 34.0);
x[35] = this->getExogVar(t, 35.0);
x[36] = this->getExogVar(t, 36.0);
x[37] = this->getExogVar(t, 37.0);
x[38] = this->getExogVar(t, 38.0);
x[39] = this->getExogVar(t, 39.0);
x[40] = this->getExogVar(t, 40.0);
x[41] = this->getExogVar(t, 41.0);
x[42] = this->getExogVar(t, 42.0);
x[43] = this->getExogVar(t, 43.0);
x[44] = this->getExogVar(t, 44.0);
x[45] = this->getExogVar(t, 45.0);
x[46] = this->getExogVar(t, 46.0);
x[47] = this->getExogVar(t, 47.0);
x[48] = this->getExogVar(t, 48.0);
x[49] = this->getExogVar(t, 49.0);
x[50] = this->getExogVar(t, 50.0);
x[51] = this->getExogVar(t, 51.0);
x[73] = parms[1] * y[0];
x[77] = y[31] + y[41];
x[82] = ((1.0/(1.0 + exp(parms[4] * (t - 2019.0) - parms[5]))) * (parms[6] - parms[6] * parms[7]) + parms[6] * parms[7]) + parms[8];
x[90] = (1.0/(1.0 + exp(-parms[211] * ((t - 2019.0) - parms[212])))) * parms[213];
x[107] = parms[222] + parms[223] * pow((y[62]/y[61]), parms[224]);
x[108] = (1.0/(1.0 + exp(parms[30] * (t - 2019.0) - parms[31]))) * (parms[12] - parms[12] * parms[13]) + parms[12] * parms[13];
x[109] = (1.0/(1.0 + exp(parms[30] * (t - 2019.0) - parms[31]))) * (parms[18] - parms[18] * parms[19]) + parms[18] * parms[19];
x[110] = (1.0/(1.0 + exp(parms[30] * (t - 2019.0) - parms[31]))) * (parms[24] - parms[24] * parms[25]) + parms[24] * parms[25];
x[114] = (1.0/(1.0 + exp(parms[38] * (t - 2019.0) - parms[39]))) * (parms[32] - parms[32] * parms[37]) + parms[32] * parms[37];
x[115] = parms[220] * pow((y[3]/y[2]), parms[221]);
x[119] = parms[40] - parms[41] * (y[1]/y[0] - parms[1]);
x[123] = (y[11] * (1.0 - y[7]) + y[63] * y[58] * (1.0 + parms[139]) * y[7]) * (1.0 + parms[143]);
x[125] = (y[11] * (1.0 - y[8]) + y[63] * y[58] * (1.0 + parms[214]) * y[8]) * (1.0 + parms[215]);
x[136] = y[63] * y[58]/y[11];
x[137] = y[63] * y[58];
x[140] = parms[225] * pow((y[3]/y[2]), parms[226]);
x[158] = parms[69] * y[35];
x[159] = parms[70] * y[17];
x[164] = ((1.0/(1.0 + exp(parms[73] * (t - 2019.0) - parms[74]))) * (parms[75] - parms[75] * parms[76]) + parms[75] * parms[76]) + parms[77];
x[171] = parms[84] * (y[17] + y[35] + y[15] * y[58]);
x[175] = 0.0;
x[176] = y[43] + y[34] + y[13];
x[193] = 0.155;
x[201] = 0.0;
x[218] = parms[146] * (y[73] * y[66] * y[58]);
x[226] = parms[151] * y[69];
x[228] = ((1.0/(1.0 + exp(parms[152] * (t - 2019.0) - parms[153]))) * (parms[154] - parms[154] * parms[155]) + parms[154] * parms[155]) + parms[156];
x[229] = parms[157] * y[42];
x[238] = y[30] + y[54];
x[248] = parms[181] * y[68] * y[63];
x[250] = (1.0/(1.0 + exp(parms[182] * (t - 2019.0) - parms[183]))) * (parms[184] - parms[184] * parms[185]) + parms[184] * parms[185];
x[277] = parms[52] * y[59];
x[278] = parms[52] * y[61];
x[279] = parms[53] * y[69];
x[282] = parms[62] * (parms[61] * (y[15] + y[16]) - y[14]);
x[289] = parms[78] * y[18];
x[293] = parms[87] * (parms[86] * y[23] - y[22]);
x[312] = 0.0;
x[321] = parms[170] * (parms[169] * (y[49] + y[47]) - y[45]);
x[334] = parms[191] * y[60];
x[335] = parms[191] * y[62];
x[336] = parms[193] * y[63];
x[337] = parms[194] * y[64];
x[338] = parms[193] * y[65];
x[339] = parms[195] * y[66];
x[340] = parms[196] * y[67];
x[341] = parms[192] * y[68];
ydot[14] = x[282];
ydot[18] = x[289];
ydot[22] = x[293];
ydot[38] = x[312];
ydot[45] = x[321];
ydot[59] = x[277];
ydot[60] = x[334];
ydot[61] = x[278];
ydot[62] = x[335];
ydot[63] = x[336];
ydot[64] = x[337];
ydot[65] = x[338];
ydot[66] = x[339];
ydot[67] = x[340];
ydot[68] = x[341];
ydot[69] = x[279];
ydot[73] = -x[30] * y[73];
x[53] = x[36] * y[2];
x[54] = x[35] * y[2];
x[59] = x[41] * y[18];
x[60] = x[42] * y[18];
x[61] = x[43] * y[18];
x[62] = x[44] * x[226];
x[63] = x[45] * x[226];
x[64] = x[46] * x[226];
x[65] = x[47] * y[32];
x[66] = x[49] * y[32];
x[67] = x[48] * y[32];
x[68] = x[50] * y[32];
x[69] = x[51] * y[32];
x[72] = parms[2] * (x[73] - y[1]);
x[91] = x[90] * parms[210] + y[74];
x[96] = x[12] * x[8];
x[97] = x[13] * x[9];
x[98] = x[14] * x[10];
x[99] = x[15] * x[11];
x[100] = x[17] * x[16];
x[101] = x[19] * x[18];
x[102] = x[21] * x[20];
x[103] = x[23] * x[22];
x[104] = x[108] * pow((y[11]/(y[63] * y[58] * (1.0 + parms[139]))), parms[14]) + parms[15] * pow((y[60]/y[59]), parms[16]);
x[105] = x[109] * pow((y[11]/(y[63] * y[58] * (1.0 + parms[139]))), parms[20]) + parms[21] * pow((y[60]/y[59]), parms[22]);
x[106] = x[110] * pow((y[11]/(y[63] * y[58] * (1.0 + parms[139]))), parms[26]) + parms[27] * pow((y[60]/y[59]), parms[28]);
x[111] = y[73] * y[66] * y[58] + y[9] * y[68] * y[65] * y[58] + x[25] * y[67] * y[58];
x[113] = x[114] * pow((y[65] * y[58]/(y[11] * (1.0 + x[115]))), parms[33]) + parms[34] * (pow((y[59]/y[60]), parms[35]));
x[118] = (1.0 + x[119]) * y[10];
x[126] = y[11] * x[0] * (1.0 - x[12]) + y[63] * y[58] * x[1] * (1.0 + parms[139]) * x[12];
x[127] = y[11] * x[2] * (1.0 - x[13]) + y[63] * y[58] * x[3] * (1.0 + parms[139]) * x[13];
x[128] = y[11] * x[4] * (1.0 - x[14]) + y[63] * y[58] * x[5] * (1.0 + parms[139]) * x[14];
x[129] = y[11] * x[6] * (1.0 - x[15]) + y[63] * y[58] * x[7] * (1.0 + parms[139]) * x[15];
x[130] = y[11] * (1.0 - x[17]) + y[63] * y[58] * x[24] * (1.0 + parms[139]) * x[17];
x[131] = y[11] * (1.0 - x[19]) + y[63] * y[58] * x[24] * (1.0 + parms[139]) * x[19];
x[132] = y[11] * (1.0 - x[21]) + y[63] * y[58] * x[24] * (1.0 + parms[139]) * x[21];
x[133] = y[11] * (1.0 - x[23]) + y[63] * y[58] * x[24] * (1.0 + parms[139]) * x[23];
x[157] = x[158] + x[159];
x[161] = parms[71] * y[32] * x[123];
x[162] = parms[72] * y[2] * x[123];
x[163] = x[164] * y[18];
x[172] = parms[85] * (x[171] - y[27]);
x[179] = parms[88] - parms[89]/(1.0 + exp(-parms[90] * (y[24]/x[176] - parms[91])));
x[190] = x[31] + parms[116];
x[191] = x[31] + parms[117];
x[227] = x[228] * x[226];
x[243] = (1.0 - parms[209]) * x[238];
x[273] = parms[216] * (x[107] - y[8]);
x[308] = y[33]/x[123] - parms[131] * y[32];
x[317] = y[40]/x[123] - parms[158] * y[42];
x[332] = x[282] + x[293] + x[321];
ydot[8] = x[273];
ydot[32] = x[308];
ydot[42] = x[317];
ydot[56] = x[332];
x[71] = y[0] + x[72];
x[83] = x[123] * y[4] + x[126] * x[8];
x[85] = y[40] + x[10] * x[128];
x[86] = y[33] + x[11] * x[129];
x[92] = x[91] * x[125];
x[124] = x[111]/(y[73] + y[9] * y[68] + x[25]);
x[135] = parms[203] * (1.0 - parms[204]) * x[91] * x[125]/x[77];
x[160] = x[161] + x[162];
x[178] = y[30] - x[179];
x[192] = y[30] * y[24] + x[190] * y[57] * y[58] - x[193] * y[44];
x[247] = parms[202] * x[91] * x[125]/y[58];
x[249] = x[250] * (y[4] * x[123] + x[8] * x[126]);
x[269] = x[91] - parms[11] * y[3];
x[270] = parms[17] * (x[104] - y[5]);
x[271] = parms[23] * (x[105] - y[6]);
x[272] = parms[29] * (x[106] - y[7]);
x[274] = parms[36] * (x[113] - y[9]);
x[276] = parms[43] * (x[118] - y[11]);
x[300] = x[172];
x[310] = parms[126] * (y[33] + x[11] * x[129]);
x[325] = parms[205] * parms[206] * x[91] * x[125]/y[58];
x[326] = parms[205] * (1.0 - parms[206]) * x[91] * x[125];
ydot[3] = x[269];
ydot[5] = x[270];
ydot[6] = x[271];
ydot[7] = x[272];
ydot[9] = x[274];
ydot[11] = x[276];
ydot[27] = x[300];
ydot[37] = x[310];
ydot[50] = x[325];
ydot[51] = x[326];
x[57] = x[39] * x[71];
x[79] = parms[3] * x[71];
x[112] = x[111]/x[124];
x[121] = (y[11] * (1.0 - y[5]) + y[63] * y[58] * (1.0 + parms[139]) * y[5]) * (1.0 + parms[140] + parms[141] + x[135]);
x[156] = x[160] + x[157];
x[181] = ((x[178] * y[43] + x[178] * (1.0 - parms[92]) * y[13] + x[178] * (1.0 - parms[93]) * y[34]) + y[30] * y[24])/(x[176] + y[24]);
x[189] = x[33] + parms[113] * (x[276]/y[11] - parms[114]);
x[200] = (1.0/(1.0 + exp(-parms[121] * (x[178] - parms[122] - x[276]/y[11])))) * (parms[123] - parms[124]) + parms[124];
x[251] = parms[186] * x[249];
x[254] = (1.0 - parms[186]) * x[249];
x[290] = (parms[81] * (x[277]/y[59]) + parms[82] * x[276]/y[11]) * y[20];
x[298] = (1.0 - parms[207]) * x[326];
x[318] = (parms[148] * (x[277]/y[59]) + parms[149] * x[276]/y[11]) * y[39];
x[330] = parms[207] * x[326];
ydot[20] = x[290];
ydot[39] = x[318];
ydot[52] = x[330];
ydot[53] = x[298];
x[134] = parms[203] * parms[204] * x[91] * x[125]/((y[11] * (1.0 - y[6]) + y[63] * y[58] * (1.0 + parms[139]) * y[6]) * (1.0 + parms[142]) * (x[79] + x[163] + x[227]));
x[165] = parms[79] * x[156];
x[180] = x[181] * (1.0 + y[28]);
x[214] = parms[140] * x[77] * ((1.0 - y[5]) * y[11] + y[5] * y[63] * y[58] * (1.0 + parms[139]))/x[121];
x[252] = parms[187] * x[251];
x[305] = parms[115] * (x[189] - y[30]);
ydot[30] = x[305];
x[70] = (y[4] + x[252]/x[123])/y[2] - parms[11];
x[80] = x[123] * y[4] + y[33] + x[165] + y[40] + x[252];
x[84] = x[165] + x[127] * x[9];
x[122] = (y[11] * (1.0 - y[6]) + y[63] * y[58] * (1.0 + parms[139]) * y[6]) * (1.0 + parms[142] + x[134]);
x[183] = x[180] * (1.0 + y[29]);
x[253] = x[251] - x[252];
x[268] = y[4] + x[252]/x[123] - parms[11] * y[2];
x[288] = x[165]/x[123] - parms[80] * y[19];
ydot[2] = x[268];
ydot[19] = x[288];
x[78] = x[122] * (x[79] + x[227] + x[163]);
x[87] = x[122] * x[79] + x[130] * x[16];
x[88] = x[122] * x[163] + x[131] * x[18];
x[89] = x[122] * x[227] + x[20] * x[132];
x[168] = x[156] - x[122] * x[163] - x[131] * x[18] - parms[145] * x[156] - (1.0 + parms[83]) * y[20] * y[18];
x[224] = (1.0 + parms[150]) * y[39] * x[226] + x[122] * x[227] + x[132] * x[20] + parms[158] * x[123] * y[42];
x[75] = x[77] + x[22] * x[133] + x[78] + x[16] * x[130] + x[18] * x[131] + x[20] * x[132] + x[80] + x[92] + x[111] + x[8] * x[126] + x[9] * x[127] + x[10] * x[128] + x[11] * x[129];
x[76] = x[77]/x[121] + x[22] + x[78]/x[122] + x[16] + x[18] + x[20] + x[80]/x[123] + x[91] + x[111]/x[124] + x[8] + x[9] + x[10] + x[11];
x[95] = y[5] * (x[77]/x[121]) + y[6] * (x[78]/x[122]) + y[7] * (x[80]/x[123]) + y[8] * x[92]/x[123];
x[215] = parms[141] * x[77] * ((1.0 - y[5]) * y[11] + y[5] * y[63] * y[58] * (1.0 + parms[139]))/x[121] + parms[142] * x[78] * ((1.0 - y[6]) * y[11] + y[6] * y[63] * y[58] * (1.0 + parms[139]))/x[122] + parms[143] * x[80] * ((1.0 - y[7]) * y[11] + y[7] * y[63] * y[58] * (1.0 + parms[139]))/x[123];
x[216] = x[135] * x[77] * ((1.0 - y[5]) * y[11] + y[5] * y[63] * y[58] * (1.0 + parms[139]))/x[121] + x[134] * x[78] * ((1.0 - y[6]) * y[11] + y[6] * y[63] * y[58] * (1.0 + parms[139]))/x[122];
x[223] = x[224] + y[41];
x[74] = x[71] - x[95] - x[96] - x[97] - x[98] - x[99] - x[100] - x[101] - x[102] - x[103];
x[94] = x[95] * y[63] * y[58] + (x[96] * x[1] + x[97] * x[3] + x[98] * x[5] + x[99] * x[7] + x[100] * x[24] + x[101] * x[24] + x[102] * x[24] + x[103] * x[24]) * y[64] * y[58];
x[117] = x[77]/x[121] + x[22] + x[80]/x[123] + x[91] + x[8] + x[9] + x[10] + x[11] + x[112] - x[95] - x[96] - x[97] - x[98] - x[99] - x[100] - x[101] - x[102] - x[103];
x[265] = parms[0] * (x[76] - y[0]) + x[70] * y[0];
x[266] = x[71] - x[76];
ydot[0] = x[265];
ydot[1] = x[266];
x[52] = x[34] * x[74];
x[55] = x[37] * x[74];
x[56] = x[38] * x[74];
x[58] = x[40] * x[74];
x[116] = y[31] + x[22] * x[133] + y[41] + x[158] + x[161] + x[224] + x[80] + x[92] + x[8] * x[126] + x[9] * x[127] + x[10] * x[128] + x[11] * x[129] + x[111] - x[94];
x[139] = x[74]/(y[59]);
x[182] = parms[94] + parms[95]/(1.0 + exp(-parms[96] * ((y[17] + y[15] * y[58] + y[16] * y[58])/y[11] * x[74])));
x[213] = parms[139] * x[94];
x[217] = parms[144] * y[11] * x[74] + parms[145] * x[156];
x[245] = x[111] - x[94];
x[259] = x[32] * pow((x[94]/(y[55] * y[58])), parms[188]);
x[260] = parms[197] * x[74] * y[11];
x[261] = parms[198] * x[74] * y[11];
x[262] = parms[199] * x[74] * y[11];
x[263] = parms[200] * x[74] * y[11];
x[264] = parms[201] * x[74] * y[11];
x[304] = std::max(parms[118] * x[94]/y[58] - y[57], 0.0);
ydot[57] = x[304];
x[93] = (1.0/(1.0 + exp(-parms[217] * ((t - 2019.0) - parms[218])))) * parms[219] * std::max((0.013 * x[116] - x[92])/x[125], 0.0);
x[120] = ((1.0 + parms[51]) * y[12] * x[139] + x[122] * x[79] + x[130] * x[16] + y[11] * x[26] + parms[144] * y[11] * x[74])/x[74];
x[138] = x[139] + x[226] + y[18];
x[142] = x[75] - x[94] - x[213] - parms[144] * y[11] * x[74] - x[215] - x[214] - x[122] * x[79] - x[130] * x[16] - x[162] - x[159] - (1.0 + parms[51]) * y[12] * x[139];
x[185] = parms[103] + parms[104] * pow((x[259]), parms[102]);
x[195] = y[12] * x[139] + y[39] * x[226] + y[20] * y[18];
x[196] = parms[51] * y[12] * x[139] + parms[150] * y[39] * x[226] + parms[83] * y[20] * y[18];
x[225] = parms[160] * x[116];
x[230] = x[229] * x[123] + parms[227] * x[116];
x[231] = parms[162] * y[12] * (y[70] - x[226] - x[139] - y[18]) + parms[163] * y[12] * y[69];
x[239] = parms[175] + parms[176]/(exp(-parms[177] * ((y[46] + y[47] * y[58] + y[49] * y[58] + y[50] * y[58] + y[51])/x[116])));
x[257] = -(y[55] * y[58] + y[56] * y[58] - y[23] * y[58] - y[16] * y[58] - y[47] * y[58] - y[49] * y[58] - y[50] * y[58] - y[48] - y[52])/x[116];
x[258] = ((y[16] + y[23] + y[47] + y[49] + y[50] - y[56]) * y[58])/x[116];
x[281] = parms[60] * (parms[59] * y[12] * x[139] * (1.0 + parms[51]) - y[13]);
x[286] = 1.0/(1.0 + exp(-parms[65] * (x[259] - parms[68]))) * (parms[66] - parms[67]) + parms[67];
x[296] = 1.0/(1.0 + exp(-parms[108] * (x[259] - parms[111]))) * (parms[109] - parms[110]) + parms[110];
x[302] = parms[97] * (x[182] - y[28]);
x[323] = -parms[174] * (y[72] * x[245]/y[58]);
x[324] = -(1.0 - parms[174]) * (y[72] * x[245]/y[58]);
x[329] = -parms[189] * x[245];
ydot[13] = x[281];
ydot[28] = x[302];
ydot[47] = x[323];
ydot[48] = x[329];
ydot[49] = x[324];
ydot[74] = 2.0 * (x[93] - y[74]);
x[141] = 1.0 - x[138]/y[70];
x[143] = parms[44] * x[142];
x[144] = parms[45] * x[142];
x[145] = parms[46] * (x[142]);
x[166] = (1.0 - parms[164]) * x[231];
x[186] = x[31] + x[185];
x[188] = x[31] + parms[105] * x[185];
x[197] = x[196] + parms[119] * x[195];
x[232] = parms[164] * x[231];
x[240] = x[31] + parms[179] * x[185];
x[275] = parms[42] * (x[120] - y[10]);
x[280] = (parms[47] * (x[277]/y[59]) + parms[48] * (x[138]/y[70] - parms[49]) + parms[50] * x[276]/y[11]) * y[12];
x[313] = parms[132] * x[195];
x[315] = parms[161] * (x[225] - y[41]);
x[316] = parms[159] * (x[230] - y[40]);
x[328] = parms[178] * (x[239] - y[54]);
ydot[10] = x[275];
ydot[12] = x[280];
ydot[36] = x[313];
ydot[40] = x[316];
ydot[41] = x[315];
ydot[54] = x[328];
x[167] = (1.0 - parms[147]) * x[197];
x[187] = x[186] * (1.0 + parms[106] * y[28]);
x[204] = parms[127] - parms[128] * x[183] - parms[129] * x[141];
x[208] = parms[133] + parms[134] * x[141];
x[219] = parms[147] * x[197];
x[221] = x[223] + (1.0 + parms[150]) * y[39] * x[226] + x[122] * x[227] + x[132] * x[20] + y[40] + x[10] * x[128] + x[91] * x[125] + x[232];
x[241] = (1.0 - parms[180]) * x[240];
x[146] = x[142] - x[218] - x[180] * y[17] - x[187] * y[15] * y[58] - x[188] * y[16] * y[58] + x[178] * (1.0 - parms[92]) * y[13] - (x[145] + x[143] + x[144]);
x[169] = x[183] * y[35] + x[180] * y[17] + x[187] * y[15] * y[58] + x[238] * y[25] + y[53] * x[243] - (x[178] * y[43] + x[178] * (1.0 - parms[92]) * y[13] + x[178] * (1.0 - parms[93]) * y[34]) - x[186] * y[23] * y[58] + x[191] * y[21] * y[58] - y[30] * y[24] - x[122] * x[163] - x[131] * x[18] - parms[145] * x[156] - (1.0 + parms[83]) * y[20] * y[18] + x[167] - x[166] + x[160] + x[157];
x[207] = x[208] * y[69];
x[242] = (1.0 - parms[208]) * x[241];
x[147] = (1.0 - parms[136]) * x[146];
x[170] = (1.0 - parms[137]) * x[169];
x[209] = parms[135] * (x[207] - y[70]);
x[212] = parms[138] * x[195] + parms[136] * x[146] + parms[137] * x[169];
x[222] = x[238] * y[46] + x[240] * y[47] * y[58] + x[241] * y[49] * y[58] + y[50] * x[242] * y[58] + y[51] * x[243];
ydot[70] = x[209];
x[148] = x[147] - x[282] * y[58] - x[281];
x[149] = x[147]/(x[123] * y[2]);
x[173] = x[170] - x[172] - x[261];
x[211] = x[212] + x[213] + x[214] + x[215] + x[216] + x[217];
x[220] = x[221] + x[222];
x[81] = (x[82] + parms[9] * (x[149] - x[276]/y[11])) * y[2];
x[150] = (1.0 - parms[58]) * x[148];
x[154] = parms[58] * x[148] - x[260];
x[174] = x[173];
x[235] = parms[165] * x[220];
x[236] = parms[167] * x[220];
x[151] = std::max(0.0, (parms[54] + parms[55] * (y[73] * y[66])/(x[116]/y[58])) * x[150]);
x[152] = std::max(0.0, (parms[56] + parms[57] * (y[73] * y[66])/(x[116]/y[58])) * x[150]);
x[155] = x[123] * y[4] + x[126] * x[8] - x[154];
x[267] = parms[10] * (x[81] - y[4]);
x[319] = parms[166] * (x[235] - y[43]);
x[320] = parms[168] * (x[236] - y[44]);
ydot[4] = x[267];
ydot[43] = x[319];
ydot[44] = x[320];
x[153] = x[150] - x[151] - x[152];
x[210] = x[211] + x[218] + x[144] + x[219] + x[178] * y[43] + x[193] * y[44] + x[152] - x[262] + x[192];
x[246] = (x[248] + x[190] * y[57] + x[191] * y[21] + x[247] - x[242] * y[50] - x[240] * y[47] - x[241] * y[49] - x[186] * y[23] - x[188] * y[16]) * y[58] - x[151] - x[175] + x[264] - x[238] * y[48] - y[52] * x[243];
x[283] = parms[63] * (x[155]/y[58]);
x[285] = (1.0 - x[286]) * parms[64] * (x[155]/y[58]);
ydot[16] = x[285];
x[194] = (1.0 - parms[138]) * x[195] + x[145] + x[196] + x[231] - x[197] - x[183] * y[35] + x[178] * (1.0 - parms[93]) * y[34] + x[153] + x[174] + x[248] * y[58] + x[143] - x[161] - x[158] + x[263];
x[233] = x[220] - x[210] - x[224];
x[244] = -(x[245] + x[246])/x[116];
x[284] = (1.0 - x[296]) * x[283];
x[294] = (parms[107] * x[300]/y[58] + x[283]);
ydot[15] = x[284];
x[184] = parms[98] + parms[99]/(1.0 + exp(-parms[100] * (y[35]/x[194])));
x[202] = y[38] * x[194];
x[203] = x[204] * x[194];
x[205] = x[194] - y[31] - x[22] * x[133];
x[234] = x[233] + x[319] + x[320] + x[321] * y[58];
x[237] = parms[171] + parms[172] * x[244];
x[287] = x[155] - x[284] * y[58] - x[285] * y[58] - x[253];
x[291] = x[294] - x[293] - x[284];
x[295] = (1.0 - x[296]) * x[294];
ydot[17] = x[287];
ydot[23] = x[295];
x[206] = y[33] + x[11] * x[129] - x[205];
x[255] = x[94]/y[58] + x[240] * y[47] + x[241] * y[49] + x[186] * y[23] + x[188] * y[16] + x[242] * y[50] + x[151]/y[58] + x[175]/y[58] + x[291] + x[332] + x[238] * y[48]/y[58] + y[52] * x[243]/y[58];
x[256] = x[111]/y[58] + x[248] + x[264]/y[58] + x[190] * y[57] + x[191] * y[21] + x[249]/y[58] + x[323] + x[324] + x[285] + x[295] + x[325] + x[247] + x[329]/y[58] + x[330]/y[58] - x[304];
x[303] = parms[101] * (x[184] - y[29]);
x[307] = parms[130] * (x[203] - y[33]);
x[311] = parms[125] * (x[202] - y[71]);
x[322] = parms[173] * (x[237] - y[72]);
x[327] = x[234] - x[323] * y[58] - x[324] * y[58] - x[325] * y[58] - x[326] - parms[202] * x[91] * x[125]/y[58];
x[331] = (x[245]/y[58] + x[246]/y[58] + x[249]/y[58] + x[323] + x[329]/y[58] + x[324] + x[285] + x[295] + x[325] + x[247] - x[332]);
ydot[29] = x[303];
ydot[33] = x[307];
ydot[46] = x[327];
ydot[55] = x[331];
ydot[71] = x[311];
ydot[72] = x[322];
x[198] = x[200] * x[194] + x[201] * (y[34] + y[36]) + x[311];
x[292] = x[331] - x[304];
x[297] = x[327] - x[329];
x[309] = x[311] + x[310];
x[333] = parms[190] * ((x[255] - x[256])/x[256]);
ydot[21] = x[292];
ydot[25] = x[297];
ydot[35] = x[309];
ydot[58] = x[333];
x[199] = x[198] - x[22] * x[133];
x[314] = x[205] - y[33] - x[11] * x[129] + x[309] - x[313];
ydot[34] = x[314];
x[177] = (x[287] + x[309] + x[297] + x[298]) + x[165] + x[9] * x[127] + parms[112] * (x[319] + x[314] + x[281]) - (x[319] + x[314] + x[281] + x[300] + x[254]) - x[313] + (x[293] * y[58] + x[284] * y[58] - x[295] * y[58] + x[292] * y[58]);
x[299] = parms[112] * ((x[319] + x[314] + x[281]));
x[306] = parms[120] * (x[199] - y[31]);
ydot[26] = x[299];
ydot[31] = x[306];
x[301] = std::max(x[177], -y[24]);
ydot[24] = x[301];
}	
};

#endif
